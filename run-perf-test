#!/usr/bin/env escript

v4() ->
  v4(rand:uniform(round(math:pow(2, 48))) - 1, rand:uniform(round(math:pow(2, 12))) - 1, rand:uniform(round(math:pow(2, 32))) - 1, rand:uniform(round(math:pow(2, 30))) - 1).

v4(R1, R2, R3, R4) ->
    <<R1:48, 4:4, R2:12, 2:2, R3:32, R4: 30>>.

% Returns a string representation of a binary UUID.
to_string(U) ->
    lists:flatten(io_lib:format("~8.16.0b-~4.16.0b-~4.16.0b-~2.16.0b~2.16.0b-~12.16.0b", get_parts(U))).

% Returns the 32, 16, 16, 8, 8, 48 parts of a binary UUID.
get_parts(<<TL:32, TM:16, THV:16, CSR:8, CSL:8, N:48>>) ->
    [TL, TM, THV, CSR, CSL, N].

% shortcut to create uuid string
uuid() -> to_string(v4()).


map_to_uuid([_|T]) -> [uuid()|map_to_uuid(T)];
map_to_uuid([])    -> [].

map_to_tuples([H|T]) -> [{H, 0}|map_to_tuples(T)];
map_to_tuples([])    -> [].


binary_search(Key, Tuple) when is_tuple(Tuple) ->
    binary_search(Key, Tuple, 1, tuple_size(Tuple)).

binary_search(_Key, _Tuple, Left, Right) when Left > Right ->
    false;

binary_search(Key, Tuple, Left, Right) ->
    MiddleKey = (Left + Right) div 2,
    MiddleValue = element(MiddleKey, Tuple),
    if
	MiddleValue < Key ->
	    binary_search(Key, Tuple, MiddleKey + 1, Right);
	MiddleValue > Key ->
	    binary_search(Key, Tuple, Left, MiddleKey - 1);
	true ->
	    MiddleKey
    end.


filter_list(Keys, Entry) ->
    case lists:member(Entry, Keys) of
        true ->
            [Entry];
        false ->
            []
    end.

filter_map(Keys, Entry) ->
    case maps:is_key(Entry, Keys) of
        true ->
            [Entry];
        false ->
            []
    end.

filter_tuple(Keys, Entry) ->
    case binary_search(Entry, Keys) of
        true ->
            [Entry];
        false ->
            []
    end.

filter_set(Keys, Entry) ->
    case sets:is_element(Entry, Keys) of
        true ->
            [Entry];
        false ->
            []
    end.


walk_entries(F, Keys, Entries) -> walk_entries(F, Keys, Entries, 0).
walk_entries(_, _, [], Acc) -> Acc;
walk_entries(F, Keys, [Entry|T], Acc) ->
  F(Keys, Entry),
  walk_entries(F, Keys, T, Acc+1).

measure_one(F) ->
  Start = os:timestamp(),
  F(),
  timer:now_diff(os:timestamp(), Start).

measure_n(F, N) ->
  X = lists:seq(1, N),
  Time = lists:foldl(fun(_, Sum) -> Sum + measure_one(F) end, 0, X),
  Time/N.

measure(F, Description) ->
  Time = measure_n(F, 16),
  io:format("~s \"time\": ~f }~n", [Description, Time/1000000]).


run_list(Keys, Entries) ->
  walk_entries(fun(K, E) -> filter_list(K, E) end, Keys, Entries).

run_map(KeysList, Entries) ->
  KeyTuples = map_to_tuples(KeysList),
  Keys = maps:from_list(KeyTuples),
  walk_entries(fun(K, E) -> filter_map(K, E) end, Keys, Entries).

run_tuple(KeysList, Entries) ->
  SortedKeysList = lists:sort(KeysList),
  Keys = list_to_tuple(SortedKeysList),
  walk_entries(fun(K, E) -> filter_tuple(K, E) end, Keys, Entries).

run_set(KeysList, Entries) ->
  Keys = sets:from_list(KeysList),
  walk_entries(fun(K, E) -> filter_set(K, E) end, Keys, Entries).


run_with_keys(Entries, Keys) ->
  measure(fun() -> run_list(Keys, Entries) end, io_lib:format("{ \"entries\": ~B, \"keys\": ~B, \"type\": \"lists:member\",", [length(Entries), length(Keys)])),
  measure(fun() -> run_map(Keys, Entries) end, io_lib:format("{ \"entries\": ~B, \"keys\": ~B, \"type\": \"maps:is_key\",", [length(Entries), length(Keys)])),
  measure(fun() -> run_tuple(Keys, Entries) end, io_lib:format("{ \"entries\": ~B, \"keys\": ~B, \"type\": \"tuples:binary_search\",", [length(Entries), length(Keys)])),
  measure(fun() -> run_set(Keys, Entries) end, io_lib:format("{ \"entries\": ~B, \"keys\": ~B, \"type\": \"sets:is_element\",", [length(Entries), length(Keys)])).

take(N, List) ->
  {SubList, _} = lists:split(N, List),
  SubList. 

run_with_entries(Entries, Keys) ->
  run_with_keys(Entries, take(10, Keys)),
  run_with_keys(Entries, take(100, Keys)),
  run_with_keys(Entries, take(1000, Keys)),
  run_with_keys(Entries, take(10000, Keys)),
  run_with_keys(Entries, take(100000, Keys)).


main(_) ->
  X = lists:seq(1, 100000),
  
  Entries = map_to_uuid(X),
  Keys = map_to_uuid(X),

  run_with_entries(take(1, Entries), Keys),
  run_with_entries(take(10, Entries), Keys),
  run_with_entries(take(100, Entries), Keys),
  run_with_entries(take(1000, Entries), Keys),
  run_with_entries(take(10000, Entries), Keys).
