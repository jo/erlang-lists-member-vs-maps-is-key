#!/usr/bin/env escript

v4() ->
  v4(rand:uniform(round(math:pow(2, 48))) - 1, rand:uniform(round(math:pow(2, 12))) - 1, rand:uniform(round(math:pow(2, 32))) - 1, rand:uniform(round(math:pow(2, 30))) - 1).

v4(R1, R2, R3, R4) ->
    <<R1:48, 4:4, R2:12, 2:2, R3:32, R4: 30>>.

% Returns a string representation of a binary UUID.
to_string(U) ->
    lists:flatten(io_lib:format("~8.16.0b-~4.16.0b-~4.16.0b-~2.16.0b~2.16.0b-~12.16.0b", get_parts(U))).

% Returns the 32, 16, 16, 8, 8, 48 parts of a binary UUID.
get_parts(<<TL:32, TM:16, THV:16, CSR:8, CSL:8, N:48>>) ->
    [TL, TM, THV, CSR, CSL, N].

% shortcut to create uuid string
uuid() -> to_string(v4()).

map_to_uuid([_|T]) -> [uuid()|map_to_uuid(T)];
map_to_uuid([])    -> [].

map_to_uuid_tuples([_|T]) -> [{uuid(),0}|map_to_uuid_tuples(T)];
map_to_uuid_tuples([])    -> [].

filter(IdsToFilter, Id) ->
    case maps:is_key(Id, IdsToFilter) of
        true ->
            io:format("Filter result:" ++ Id ++ "~n"),
            [Id];
        false ->
            []
    end.

walk_over_doc_ids(IdsToFilter, L) -> walk_over_doc_ids(IdsToFilter, L, 0).
walk_over_doc_ids(_, [], Acc) -> Acc;
walk_over_doc_ids(IdsToFilter, [Id|T], Acc) ->
  filter(IdsToFilter, Id),
  walk_over_doc_ids(IdsToFilter, T, Acc+1).

main(_) ->
  X = lists:seq(1, 20000),
  IdsToFilterList = map_to_uuid_tuples(X),
  IdsToFilter = maps:from_list(IdsToFilterList),
  % TODO: convert to maps:is_key()
  Y = lists:seq(1, 500000),
  DocIds = map_to_uuid(Y),

  % TODO: start time measureing here...
  walk_over_doc_ids(IdsToFilter, DocIds).
  % end time measureing here.



